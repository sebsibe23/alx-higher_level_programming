===========================
0-add_integer.py is a Python script that takes two arguments and returns their sum as an integer. 
===========================

This module defines an integer addition function add_integer(a, b=98).
The function takes two arguments, a and b, and returns the sum of them as an integer.
If b is not given, it defaults to 98.
The function raises a TypeError if either argument is not an integer.
Usage
=====

``add_integer(...)``` A function that returns the addition of its two arguments is called an additive function.
 For numbers, this function behaves the same way as the ``+`` operator, which performs arithmetic addition.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

::

    >>> add_integer(2, -3)
    -1

the function can handle floating-point values as input. This means that numbers with decimal places are accepted 
and processed correctly by the function.

::

    >>> add_integer(2.0, 3.0)
    5

Before the addition operation is performed, the floats are casted to ints, which means that they lose their decimal part. 

::

    >>> add_integer(2.9, 0.2)
    2

::

    >>> add_integer(-2.9, -0.2)
    -2

floating and non-floating-point values can be combined in arithmetic operations, such as addition or multiplication.

::

    >>> add_integer(2.3, -3)
    -1

The second argument is optional - by default, it is 98.

::

    >>> add_integer(2)
    100

Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
