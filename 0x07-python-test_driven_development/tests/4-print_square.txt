import unittest
import io
import sys

>>> print_square = __import__('4-print_square').print_square

>>> print_square(3)
###
###
###

>>> print_square(1)
#

>>> print_square(2)
##
##

>>> print_square(-1)
Traceback (most recent call last):
ValueError: size must be >= 0

>>> print_square("idk")
Traceback (most recent call last):
TypeError: size must be an integer

>>> print_square(4.0)
Traceback (most recent call last):
TypeError: size must be an integer

>>> print_square('42')
Traceback (most recent call last):
TypeError: size must be an integer

>>> print_square()
Traceback (most recent call last):
TypeError: print_square() missing 1 required positional argument: 'size'

>>> print_square(1, 2)
Traceback (most recent call last):
TypeError: print_square() takes 1 positional argument but 2 were given

>>> print_square(0)

class TestPrintSquare(unittest.TestCase):
    def test_print_square(self):
        # Redirect stdout to a buffer
        stdout = sys.stdout
        sys.stdout = io.StringIO()

        print_square(3)
        self.assertEqual(sys.stdout.getvalue(), "###\n###\n###\n")

        # Reset stdout
        sys.stdout = stdout

if __name__ == '__main__':
    unittest.main()

